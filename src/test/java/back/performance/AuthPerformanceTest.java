package back.performance;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.TestPropertySource;

import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.jupiter.api.Assertions.*;


@TestPropertySource(properties = {
    "jwt.secret-key=performance-test-secret-key-for-load-testing-very-long-key-minimum-256-bits",
    "jwt.expiration-ms=3600000"
})
@DisplayName("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
class AuthPerformanceTest extends BasePerformanceTest {

    private static final AtomicInteger userCounter = new AtomicInteger(1);

    @Test
    @DisplayName("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –ú–∞—Å—Å–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    void testMassiveUserRegistration() throws InterruptedException {
        int threadCount = 10;
        int requestsPerThread = 20;
        
        PerformanceMetrics metrics = executeLoadTest(
            "–ú–∞—Å—Å–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            threadCount,
            requestsPerThread,
            this::performUserRegistration
        );

        assertTrue(metrics.getSuccessRate() > 95.0,
                  "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ 95%");
        assertTrue(metrics.getAverageResponseTime() < 2000, 
                  "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 2 —Å–µ–∫—É–Ω–¥");
        assertTrue(metrics.getThroughput() > 5.0, 
                  "–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫");
    }

    @Test
    @DisplayName("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã")
    void testConcurrentLogins() throws InterruptedException {
        String testEmail = "load.test.user@sfedu.ru";
        String testPassword = "loadTestPassword123";
        createTestUser(testEmail, testPassword);

        int threadCount = 15;
        int requestsPerThread = 15;
        
        PerformanceMetrics metrics = executeLoadTest(
            "–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω—ã",
            threadCount,
            requestsPerThread,
            () -> performUserLogin(testEmail, testPassword)
        );

        assertTrue(metrics.getSuccessRate() > 90.0,
                  "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ 90%");
        assertTrue(metrics.getAverageResponseTime() < 1500, 
                  "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1.5 —Å–µ–∫—É–Ω–¥");
        assertTrue(metrics.getThroughput() > 8.0, 
                  "–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 8 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫");
    }

    @Test
    @DisplayName("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ª–æ–≥–∏–Ω)")
    void testMixedLoad() throws InterruptedException {
        String baseEmail = "mixed.load.user@sfedu.ru";
        String basePassword = "mixedLoadPassword123";
        createTestUser(baseEmail, basePassword);

        int threadCount = 12;
        int requestsPerThread = 10;
        
        PerformanceMetrics metrics = executeLoadTest(
            "–°–º–µ—à–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (50% —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, 50% –ª–æ–≥–∏–Ω)",
            threadCount,
            requestsPerThread,
            () -> {
                if (Math.random() < 0.5) {
                    performUserRegistration();
                } else {
                    performUserLogin(baseEmail, basePassword);
                }
            }
        );

        assertTrue(metrics.getSuccessRate() > 85.0,
                  "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ 85%");
        assertTrue(metrics.getAverageResponseTime() < 3000, 
                  "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥");
        assertTrue(metrics.getThroughput() > 4.0, 
                  "–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 4 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫");
    }

    @Test
    @DisplayName("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π")
    void testHighLoadStress() throws InterruptedException {
        String stressEmail = "stress.test.user@sfedu.ru";
        String stressPassword = "stressTestPassword123";
        createTestUser(stressEmail, stressPassword);

        int threadCount = 25;
        int requestsPerThread = 8;
        
        PerformanceMetrics metrics = executeLoadTest(
            "–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π",
            threadCount,
            requestsPerThread,
            () -> performUserLogin(stressEmail, stressPassword)
        );

        assertTrue(metrics.getSuccessRate() > 70.0,
                  "–î–∞–∂–µ –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ 70%");
        assertTrue(metrics.getAverageResponseTime() < 5000, 
                  "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥");
        assertTrue(metrics.getErrorCount() < metrics.getTotalRequests() * 0.3, 
                  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤");
        
        System.out.println("üèÜ –°–∏—Å—Ç–µ–º–∞ –≤—ã–¥–µ—Ä–∂–∞–ª–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç!");
    }

    @Test
    @DisplayName("–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    void testValidationPerformance() throws InterruptedException {
        int threadCount = 8;
        int requestsPerThread = 25;
        
        PerformanceMetrics metrics = executeLoadTest(
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
            threadCount,
            requestsPerThread,
            this::performInvalidRegistration
        );

        assertTrue(metrics.getAverageResponseTime() < 500,
                  "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ (< 500–º—Å)");
        assertTrue(metrics.getThroughput() > 15.0, 
                  "–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–π");
        
        System.out.println("‚ö° –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!");
    }


    private void performUserRegistration() {
        int userId = userCounter.getAndIncrement();
        String email = "perf.user." + userId + "@sfedu.ru";
        String password = "perfTestPassword" + userId;

        Map<String, Object> requestBody = Map.of(
            "email", email,
            "password", password,
            "role", "STUDENT"
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(
            baseUrl + "/auth/register", 
            request, 
            Map.class
        );

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Registration failed: " + response.getStatusCode());
        }
    }


    private void performUserLogin(String email, String password) {
        Map<String, Object> requestBody = Map.of(
            "email", email,
            "password", password
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(
            baseUrl + "/auth/login", 
            request, 
            Map.class
        );

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Login failed: " + response.getStatusCode());
        }
    }


    private void performInvalidRegistration() {
        Map<String, Object> requestBody = Map.of(
            "email", "invalid-email-format",
            "password", "",
            "role", "STUDENT"
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        ResponseEntity<Map> response = restTemplate.postForEntity(
            baseUrl + "/auth/register", 
            request, 
            Map.class
        );

        // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (!response.getStatusCode().is4xxClientError()) {
            throw new RuntimeException("Expected validation error");
        }
    }


    private void createTestUser(String email, String password) {
        try {
            Map<String, Object> requestBody = Map.of(
                "email", email,
                "password", password,
                "role", "STUDENT"
            );

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

            restTemplate.postForEntity(baseUrl + "/auth/register", request, Map.class);
        } catch (Exception e) {
        }
    }
} 